1:"$Sreact.fragment"
2:I[9586,["97","static/chunks/102969c4-60ccef36263800a0.js","28","static/chunks/64d1c0c4-a3ef1c2074d5cee5.js","205","static/chunks/205-e96f68d7203b15f6.js","3","static/chunks/3-63e812f17dc5f3c8.js","858","static/chunks/app/posts/%5Bslug%5D/page-149ed8916e948834.js"],""]
3:I[4308,[],""]
4:I[834,[],""]
5:I[560,["205","static/chunks/205-e96f68d7203b15f6.js","177","static/chunks/app/layout-6e1c24235b3dba30.js"],""]
6:I[8641,["205","static/chunks/205-e96f68d7203b15f6.js","177","static/chunks/app/layout-6e1c24235b3dba30.js"],"Analytics"]
b:I[9216,[],""]
:HL["/_next/static/css/d030d367e034049b.css","style"]
0:{"P":null,"b":"u_Sey-ZLcWxz-wW4LxgN4","p":"","c":["","posts","2025-05-19-pwa-cache-toast-jekyll-adventures"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","2025-05-19-pwa-cache-toast-jekyll-adventures","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d030d367e034049b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"suppressHydrationWarning":true,"children":[["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"2rem"},"children":[["$","header",null,{"style":{"borderBottom":"2px solid #333","paddingBottom":"1rem","marginBottom":"2rem"},"children":["$","nav",null,{"style":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":"1rem"},"children":[["$","div",null,{"children":[["$","$L2",null,{"href":"/","style":{"fontSize":"1.6rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Augustin Chan"}],["$","div",null,{"style":{"marginTop":"0.5rem"},"children":"Building systems that reason"}]]}],["$","div",null,{"style":{"display":"flex","gap":"1.5rem","flexWrap":"wrap"},"children":[["$","$L2",null,{"href":"/","style":{"textDecoration":"none","color":"#666"},"children":"Home"}],["$","$L2",null,{"href":"/about","style":{"textDecoration":"none","color":"#666"},"children":"About"}],["$","$L2",null,{"href":"/blog","style":{"textDecoration":"none","color":"#666"},"children":"Blog"}],["$","a",null,{"href":"https://8bitoracle.ai","target":"_blank","rel":"noopener noreferrer","style":{"textDecoration":"none","color":"#666"},"children":"8-Bit Oracle"}]]}]]}]}],["$","main",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"style":{"borderTop":"1px solid #ddd","paddingTop":"2rem","marginTop":"4rem","textAlign":"center","color":"#666"},"children":"Â© 2025 Augustin Chan aug@digitalrain.studio"}]]}],[["$","$L5",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-077BT1Q7PJ","strategy":"afterInteractive"}],["$","$L5",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n          gtag('config', 'G-077BT1Q7PJ');\n        "}]],["$","$L6",null,{}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n            // Service worker cleanup for legacy site versions\n            if ('serviceWorker' in navigator) {\n              navigator.serviceWorker.getRegistrations().then(function(registrations) {\n                for(let registration of registrations) {\n                  registration.unregister();\n                }\n              });\n\n              // Register cleanup service worker\n              navigator.serviceWorker.register('/sw.js').then(function(registration) {\n                console.log('Cleanup SW registered');\n              }).catch(function(error) {\n                console.log('Cleanup SW registration failed');\n              });\n            }\n          "}}]]}]}]]}],{"children":["posts","$L7",{"children":[["slug","2025-05-19-pwa-cache-toast-jekyll-adventures","d"],"$L8",{"children":["__PAGE__","$L9",{},null,false]},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
d:I[7921,[],"OutletBoundary"]
f:I[2140,[],"AsyncMetadataOutlet"]
11:I[7921,[],"ViewportBoundary"]
13:I[7921,[],"MetadataBoundary"]
14:"$Sreact.suspense"
7:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
8:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
9:["$","$1","c",{"children":["$Lc",null,["$","$Ld",null,{"children":["$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}]
a:["$","$1","h",{"children":[null,[["$","$L11",null,{"children":"$L12"}],null],["$","$L13",null,{"children":["$","div",null,{"hidden":true,"children":["$","$14",null,{"fallback":null,"children":"$L15"}]}]}]]}]
16:I[7702,["97","static/chunks/102969c4-60ccef36263800a0.js","28","static/chunks/64d1c0c4-a3ef1c2074d5cee5.js","205","static/chunks/205-e96f68d7203b15f6.js","3","static/chunks/3-63e812f17dc5f3c8.js","858","static/chunks/app/posts/%5Bslug%5D/page-149ed8916e948834.js"],"default",1]
17:T1d62,

**Abstract:**  
This post details the process of debugging and fixing service worker update notifications for new custom layouts in a Jekyll site using the Hux Blog theme. It covers how to ensure new pages are properly cached, how to handle missing client-side scripts, and how to gracefully fix JavaScript errors in the service worker logic. The article is aimed at developers working with Jekyll, PWAs, or service worker caching strategies.

**Estimated reading time:** _7 minutes_

My Jekyll site, built on the excellent Hux Blog theme, comes with Progressive Web App (PWA) capabilities, including a service worker that handles offline caching and provides a nifty "Content Refresh" toast when new content is deployed. This is great for the blog posts, but when I recently introduced a new portfolio section with custom layouts (`index.html` at the root and an `offerings/index.html` page), I noticed these new pages were serving stale content without the friendly update prompt. Time for a deep dive!

## The Hux Blog Service Worker Setup

The PWA magic in this theme revolves around a few key files:

- `sw.js`: The service worker script itself. It defines caching strategies (pre-caching an app shell, stale-while-revalidate for content) and logic for detecting updates.
- `js/sw-registration.js`: A small script that registers `sw.js` with the browser.
- `js/hux-blog.min.js` and `js/snackbar.js`: Client-side JavaScript that, among other things, listens for messages from the service worker (like "hey, new content here!") and displays the UI, such as the refresh toast.

My goal was to get my new portfolio pages (`index.html` and `offerings/index.html`) to behave like the rest of the site.

## Step 1: Ensuring Client-Side Listeners Were Present

My first check was the new layout file, `_layouts/portfolio.html`. I realized that unlike the default post/page layouts, it was missing the includes for the core JavaScript files responsible for handling the service worker's messages and displaying the toast.

**The Fix:**
I added the following script includes to `_layouts/portfolio.html` just before the closing `</body>` tag:

```html
<script src="{{ '/js/jquery.min.js' | relative_url }}"></script>
<script src="{{ '/js/bootstrap.min.js' | relative_url }}"></script>
<script src="{{ '/js/hux-blog.min.js' | relative_url }}"></script>
<script src="{{ '/js/snackbar.js' | relative_url }}"></script>
```

This ensured that the front-end code to show the toast was actually present on these pages.

## Step 2: Registering the Service Worker

With the client-side scripts in place, the next hurdle was ensuring the service worker itself was actually being registered and thus taking control of these new pages. A quick comparison with other generated pages (like `_site/404.html`) revealed that `_layouts/portfolio.html` was also missing the crucial service worker registration script.

**The Fix:**
I added the registration script to `_layouts/portfolio.html`:

```html
<script src="{{ '/js/sw-registration.js' | relative_url }}"></script>
```

Now the browser would at least _try_ to install and run `sw.js` for these pages.

## Step 3: Debugging the Service Worker Itself

After these changes, testing on `localhost` showed progress: the service worker was activating. However, I encountered a JavaScript error in the service worker's console:

```
TypeError: Cannot read properties of undefined (reading 'headers')
    at sw.js:257:32
```

This error occurred within the `revalidateContent` function in `sw.js`. This function is called for navigation requests to compare the cached version of a page with a freshly fetched one. The error specifically pointed to this line:

```javascript
const cachedVer = cached.headers.get("last-modified");
```

The problem was that on the _first visit_ to a new page (like `offerings/index.html` after clearing the cache), there wouldn't be a `cached` version yet. The `caches.match(event.request)` promise would resolve to `undefined`, and then the code would try to access `undefined.headers`, leading to the TypeError.

**The Fix:**
I modified the `revalidateContent` function in `sw.js` to gracefully handle cases where either the cached response or the fetched response (or both) might be undefined:

```javascript
function revalidateContent(cachedResp, fetchedResp) {
  return Promise.all([cachedResp, fetchedResp])
    .then(([cached, fetched]) => {
      // If there's no cached version, or if the fetched version is missing,
      // we can't determine if an update was found.
      if (!cached || !fetched) {
        console.log(
          "revalidateContent: Cached or fetched response is undefined. Cannot compare."
        );
        return;
      }

      const cachedVer = cached.headers.get("last-modified");
      const fetchedVer = fetched.headers.get("last-modified");
      console.log(
        `Cache check for ${fetched.url}: Cached "${cachedVer}" vs. Fetched "${fetchedVer}"`
      );

      if (cachedVer !== fetchedVer) {
        sendMessageToClientsAsync({
          command: "UPDATE_FOUND",
          url: fetched.url,
        });
      }
    })
    .catch((err) => {
      console.error("Error in revalidateContent:", err);
    });
}
```

This check (`if (!cached || !fetched)`) prevents the error. On the first visit, it correctly logs that it can't compare, and on subsequent visits (after the page is cached), the comparison proceeds as expected.

## How the Update Toast Works (Briefly)

With the fixes in place, the intended flow is:

1.  User visits a page (e.g., `offerings/index.html`).
2.  The service worker (`sw.js`) serves the cached version (if available) and simultaneously fetches a new version from the network (stale-while-revalidate). It uses a cache-busting query parameter (`?cache-bust=<timestamp>`) to help ensure the fetched version is fresh.
3.  The `revalidateContent` function compares the `last-modified` header of the cached page and the newly fetched page.
4.  If the headers differ (indicating new content), `sw.js` uses `client.postMessage()` to send an `UPDATE_FOUND` command to the active page.
5.  The client-side JavaScript (in `hux-blog.min.js` or `snackbar.js`) listens for this message and displays the "Content Refresh" toast, prompting the user to reload.

## Key Takeaways for Jekyll PWA Debugging

- **Layout Consistency:** Ensure all layouts that should have PWA features include _all_ necessary JavaScript (client-side listeners, SW registration script).
- **DevTools are Your Friend:** When testing service workers locally:
  - Use the "Application" tab in Chrome DevTools to "Clear site data" thoroughly.
  - Unregister and re-register the service worker to ensure the latest version is active.
  - Check the "Disable cache" option in the "Network" tab during hard reloads, then uncheck it for normal SW operation.
  - Inspect both the main browser console and the **service worker's dedicated console** for errors.
- **Understand Change Detection:** Know how your service worker detects content changes (e.g., ETag, Last-Modified header comparison, content hashing). Local development servers might not always set these headers as robustly as a production environment. The `sw.js` used here even has a `TODO` about the reliability of this for GitHub Pages.

With these pieces in place, my portfolio pages are now fully integrated into the site's PWA caching and update notification system. Hopefully, this walkthrough helps if you ever find yourself debugging similar service worker shenanigans!
c:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts\",\"description\":\"A dive into debugging service worker caching and update notifications for new pages in a Jekyll site, ensuring the 'Content Refresh' toast works as expected.\",\"datePublished\":\"2025-05-19T00:00:00.000Z\",\"dateModified\":\"2025-05-19T00:00:00.000Z\",\"author\":{\"@type\":\"Person\",\"name\":\"Augustin Chan\",\"url\":\"https://augustinchan.dev\",\"sameAs\":[\"https://x.com/augchan42\",\"https://github.com/augchan42\"]},\"publisher\":{\"@type\":\"Person\",\"name\":\"Augustin Chan\",\"url\":\"https://augustinchan.dev\"},\"url\":\"https://augustinchan.dev/posts/2025-05-19-pwa-cache-toast-jekyll-adventures\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://augustinchan.dev/posts/2025-05-19-pwa-cache-toast-jekyll-adventures\"},\"image\":\"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg\"}"}}],["$","article",null,{"children":[["$","header",null,{"style":{"marginBottom":"2rem"},"children":[["$","h1",null,{"style":{"fontSize":"2.5em","marginBottom":"0.5rem"},"children":"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts"}],["$","div",null,{"style":{"color":"#666","fontSize":"1em","marginBottom":"1rem"},"children":"May 19, 2025"}],["$","p",null,{"style":{"fontSize":"1.1em","color":"#555","fontStyle":"italic","marginBottom":"2rem"},"children":"A dive into debugging service worker caching and update notifications for new pages in a Jekyll site, ensuring the 'Content Refresh' toast works as expected."}]]}],["$","$L16",null,{"content":"$17"}],"$L18"]}]]
18:["$","aside",null,{"style":{"marginTop":"4rem","paddingTop":"2rem","borderTop":"2px solid #ddd"},"children":[["$","h2",null,{"style":{"fontSize":"1.5em","marginBottom":"1.5rem"},"children":"Related Posts"}],["$","div",null,{"style":{"display":"flex","flexDirection":"column","gap":"1.5rem"},"children":[["$","article","2025-09-27-llm-reasoning-pattern-classification-failure-modes",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/2025-09-27-llm-reasoning-pattern-classification-failure-modes","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"When LLM Reasoning Becomes the Pattern - Meta-Classification Failure Modes"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Hard constraints beat soft self-regulation when an LLM's reasoning converges to a template."}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 27, 2025"}]]}],["$","article","2025-09-21-evolutionary-adrs-first-principles",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/2025-09-21-evolutionary-adrs-first-principles","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Evolutionary ADRs: Writing Architecture Decision Records from First Principles"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Why creating ADRs during development, not before it, leads to more honest and valuable documentation of your architectural decisions."}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 21, 2025"}]]}],["$","article","hello-nextra",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/hello-nextra","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Hello Nextra"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Welcome to my new blog powered by Next.js and Nextra"}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 21, 2025"}]]}]]}]]}]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:null
10:{"metadata":[["$","title","0",{"children":"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts | Augustin Chan"}],["$","meta","1",{"name":"description","content":"A dive into debugging service worker caching and update notifications for new pages in a Jekyll site, ensuring the 'Content Refresh' toast works as expected."}],["$","link","2",{"rel":"author","href":"https://augustinchan.dev"}],["$","meta","3",{"name":"author","content":"Augustin Chan"}],["$","meta","4",{"name":"keywords","content":"AI,Machine Learning,Web3,Software Engineering,React,Next.js,TypeScript,Blog"}],["$","meta","5",{"name":"creator","content":"Augustin Chan"}],["$","meta","6",{"name":"publisher","content":"Augustin Chan"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://augustinchan.dev/posts/2025-05-19-pwa-cache-toast-jekyll-adventures"}],["$","meta","10",{"property":"og:title","content":"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts"}],["$","meta","11",{"property":"og:description","content":"A dive into debugging service worker caching and update notifications for new pages in a Jekyll site, ensuring the 'Content Refresh' toast works as expected."}],["$","meta","12",{"property":"og:url","content":"https://augustinchan.dev/posts/2025-05-19-pwa-cache-toast-jekyll-adventures"}],["$","meta","13",{"property":"og:site_name","content":"Augustin Chan"}],["$","meta","14",{"property":"og:locale","content":"en_US"}],["$","meta","15",{"property":"og:image","content":"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg"}],["$","meta","16",{"property":"og:image:width","content":"400"}],["$","meta","17",{"property":"og:image:height","content":"400"}],["$","meta","18",{"property":"og:image:alt","content":"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts"}],["$","meta","19",{"property":"og:type","content":"article"}],["$","meta","20",{"property":"article:published_time","content":"2025-05-19T00:00:00.000Z"}],["$","meta","21",{"property":"article:author","content":"Augustin Chan"}],["$","meta","22",{"property":"article:section","content":"Technology"}],["$","meta","23",{"property":"article:tag","content":"AI"}],["$","meta","24",{"property":"article:tag","content":"Machine Learning"}],["$","meta","25",{"property":"article:tag","content":"Web3"}],["$","meta","26",{"property":"article:tag","content":"Software Engineering"}],["$","meta","27",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","28",{"name":"twitter:creator","content":"@augchan42"}],["$","meta","29",{"name":"twitter:title","content":"Cache Me If You Can: Getting Service Worker Update Toasts to Play Nice with New Jekyll Layouts"}],["$","meta","30",{"name":"twitter:description","content":"A dive into debugging service worker caching and update notifications for new pages in a Jekyll site, ensuring the 'Content Refresh' toast works as expected."}],["$","meta","31",{"name":"twitter:image","content":"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg"}]],"error":null,"digest":"$undefined"}
15:"$10:metadata"

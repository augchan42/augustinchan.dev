1:"$Sreact.fragment"
2:I[9586,["97","static/chunks/102969c4-60ccef36263800a0.js","28","static/chunks/64d1c0c4-a3ef1c2074d5cee5.js","205","static/chunks/205-e96f68d7203b15f6.js","3","static/chunks/3-63e812f17dc5f3c8.js","858","static/chunks/app/posts/%5Bslug%5D/page-149ed8916e948834.js"],""]
3:I[4308,[],""]
4:I[834,[],""]
5:I[560,["205","static/chunks/205-e96f68d7203b15f6.js","177","static/chunks/app/layout-6e1c24235b3dba30.js"],""]
6:I[8641,["205","static/chunks/205-e96f68d7203b15f6.js","177","static/chunks/app/layout-6e1c24235b3dba30.js"],"Analytics"]
b:I[9216,[],""]
:HL["/_next/static/css/d030d367e034049b.css","style"]
0:{"P":null,"b":"cayiHX042m2a2Uzz6E0mG","p":"","c":["","posts","2025-08-11-claude-code-productivity-gains"],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","2025-08-11-claude-code-productivity-gains","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d030d367e034049b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"suppressHydrationWarning":true,"children":[["$","div",null,{"style":{"maxWidth":"1000px","margin":"0 auto","padding":"2rem"},"children":[["$","header",null,{"style":{"borderBottom":"2px solid #333","paddingBottom":"1rem","marginBottom":"2rem"},"children":["$","nav",null,{"style":{"display":"flex","justifyContent":"space-between","alignItems":"center","flexWrap":"wrap","gap":"1rem"},"children":[["$","div",null,{"children":[["$","$L2",null,{"href":"/","style":{"fontSize":"1.6rem","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Augustin Chan"}],["$","div",null,{"style":{"marginTop":"0.5rem"},"children":"Building systems that reason"}]]}],["$","div",null,{"style":{"display":"flex","gap":"1.5rem","flexWrap":"wrap"},"children":[["$","a",null,{"href":"/#projects","style":{"textDecoration":"none","color":"#666"},"children":"Portfolio"}],["$","$L2",null,{"href":"/blog","style":{"textDecoration":"none","color":"#666"},"children":"Blog"}],["$","a",null,{"href":"https://8bitoracle.ai","target":"_blank","rel":"noopener noreferrer","style":{"textDecoration":"none","color":"#666"},"children":"8-Bit Oracle"}]]}]]}]}],["$","main",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"style":{"borderTop":"1px solid #ddd","paddingTop":"2rem","marginTop":"4rem","textAlign":"center","color":"#666"},"children":"Â© 2025 Augustin Chan aug@digitalrain.studio"}]]}],[["$","$L5",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-077BT1Q7PJ","strategy":"afterInteractive"}],["$","$L5",null,{"id":"google-analytics","strategy":"afterInteractive","children":"\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n          gtag('config', 'G-077BT1Q7PJ');\n        "}]],["$","$L6",null,{}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n            // Service worker cleanup for legacy site versions\n            if ('serviceWorker' in navigator) {\n              navigator.serviceWorker.getRegistrations().then(function(registrations) {\n                for(let registration of registrations) {\n                  registration.unregister();\n                }\n              });\n\n              // Register cleanup service worker\n              navigator.serviceWorker.register('/sw.js').then(function(registration) {\n                console.log('Cleanup SW registered');\n              }).catch(function(error) {\n                console.log('Cleanup SW registration failed');\n              });\n            }\n          "}}]]}]}]]}],{"children":["posts","$L7",{"children":[["slug","2025-08-11-claude-code-productivity-gains","d"],"$L8",{"children":["__PAGE__","$L9",{},null,false]},null,false]},null,false]},null,false],"$La",false]],"m":"$undefined","G":["$b",[]],"s":false,"S":true}
d:I[7921,[],"OutletBoundary"]
f:I[2140,[],"AsyncMetadataOutlet"]
11:I[7921,[],"ViewportBoundary"]
13:I[7921,[],"MetadataBoundary"]
14:"$Sreact.suspense"
7:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
8:["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}]
9:["$","$1","c",{"children":["$Lc",null,["$","$Ld",null,{"children":["$Le",["$","$Lf",null,{"promise":"$@10"}]]}]]}]
a:["$","$1","h",{"children":[null,[["$","$L11",null,{"children":"$L12"}],null],["$","$L13",null,{"children":["$","div",null,{"hidden":true,"children":["$","$14",null,{"fallback":null,"children":"$L15"}]}]}]]}]
16:I[7702,["97","static/chunks/102969c4-60ccef36263800a0.js","28","static/chunks/64d1c0c4-a3ef1c2074d5cee5.js","205","static/chunks/205-e96f68d7203b15f6.js","3","static/chunks/3-63e812f17dc5f3c8.js","858","static/chunks/app/posts/%5Bslug%5D/page-149ed8916e948834.js"],"default",1]
17:T1eb4,

**Abstract:**  
Claude Code has evolved from a 30% to 50% productivity improvement over Cursor's agent mode, but rapid development comes with architectural debt. Here's how I'm navigating the trade-offs and using MCP tools to enhance the workflow.

**Estimated reading time:** _4 minutes_

# Claude Code: From 30% to 50% Better Than Cursor Agent Auto Mode

After using Claude Code for almost 2 weeks, I can say Claude Code is 30% ~ 50% better than Cursor's Agent Auto mode.  Keep in mind I used to use 'vi' in college, so lack of a GUI is not a big deal to me.  For those not familiar with a character terminal - it's likely worth your while learning!

But how do I quantify this improvement? It's based on three key factors: the complexity of what I'm working on, how I interact with it to solve problems, and the quality of refactoring it handles.  So, a bit more specific than 'vibes' but definitely not scientific by any means.

---

## The Double-Edged Sword of Rapid Development

These AI coding tools are genuinely double-edged swords. You can build so quickly that it's easy to accumulate code that ends up getting cut out later. I've learned this lesson the hard way through incremental development.

On my current project, I ended up with 80+ endpoints - DSPY optimization routes for bangers, summarization, timeline generation, scanning timelines... the list went on. It wasn't until I stepped back that I realized these should all be consolidated under a unified optimization endpoint. The rapid prototyping had created architectural sprawl that needed cleanup.

Another example: I initially implemented a workspace concept that required all sources and content to be placed under a specific workspace. But as the project evolved, I realized lots of content was applicable to multiple workspaces. This required a major refactor, and it was relatively painless with Claude Code's assistance.  I went with a tag based concept which was much more flexible and more easily allows for many to many relationships.

---

## MCP Tools and Workflow Enhancement

I've added the sequential-thinking and browser-tools MCP to help with planning and front-end debugging. The browser-tools integration is particularly valuable for checking browser logs and taking screenshots during development.

But otherwise, I use Claude Code as a helpful assistant - just chatting with it, reviewing changes, and guiding the development process. I'm always reading the output carefully, as I've noticed it can make some questionable decisions.

---

## The Over-Engineering Problem

One recurring issue I've observed is that Claude Code sometimes over-engineers features by adding unnecessary metrics or complexity when a simple LLM call would be more appropriate. For example, instead of using an LLM to reason about a decision, it might implement a complex scoring system with multiple parameters and brittle heuristics.

I believe this stems from the coding training data being mostly from before LLMs were widely used for logic and reasoning. The model has learned patterns from traditional software engineering approaches that don't always translate well to the LLM-augmented development paradigm.

---

## Naming Consistency Across the Stack

One of the most valuable lessons I've learned is to keep the names consistent between Pydantic models, API endpoints (Python FastAPI backend), database table field names (SQLite), and the frontend store (Zustand for me). This eliminates the need for transformation logic, which I discovered I needed as I was building and exploring so many different features that I had to then come back and streamline everything using the same names.

The consistency pays off in several ways:
- **No data transformation layers** - Frontend receives data in the exact format it needs
- **Easier debugging** - Field names match across all layers
- **Simpler testing** - No need to mock complex transformations
- **Faster development** - Less cognitive overhead when switching between layers

---

## Testing: The Safety Net for Rapid Development

Testing becomes crucial when you're building features quickly. I have a test script to ensure the API contract between the backend and frontend isn't broken. These tests catch 80% of frontend-breaking changes with minimal maintenance.

Here's a simplified example of the contract testing approach:

```python
class TestAPIContracts:
    """Test API contracts to prevent frontend breakage."""
    
    BASE_URL = "http://localhost:8000"
    
    def _validate_response_structure(self, response_data: dict, endpoint: str):
        """Validate standard API response structure."""
        assert "success" in response_data, f"{endpoint}: Missing 'success' field"
        assert "timestamp" in response_data, f"{endpoint}: Missing 'timestamp' field"
        
        if response_data["success"]:
            assert "data" in response_data, f"{endpoint}: Missing 'data' field"
        else:
            assert "error" in response_data, f"{endpoint}: Missing 'error' field"
    
    def test_sources_list_contract(self):
        """Test GET /api/content?content_type=source contract - most critical for frontend."""
        endpoint = "/api/content"
        response = requests.get(f"{self.BASE_URL}{endpoint}?content_type=source&limit=10&offset=0")
        
        assert response.status_code == 200
        data = response.json()
        self._validate_response_structure(data, endpoint)
        
        if data["success"]:
            response_data = data["data"]
            # Validate pagination structure
            required_fields = ["content", "total", "offset", "limit"]
            for field in required_fields:
                assert field in response_data, f"{endpoint}: Missing pagination field '{field}'"
            
            # Validate source structure if any sources exist
            if response_data["content"]:
                source = response_data["content"][0]
                required_source_fields = ["id", "title", "text", "content_type", "created_at", "updated_at"]
                for field in required_source_fields:
                    assert field in source, f"{endpoint}: Source missing required field '{field}'"
        
        print(f"â {endpoint} contract validated")
```

The key insight is that these tests validate the **structure** of your API responses, not the business logic. They ensure that when you refactor backend code, the frontend still receives data in the expected format. This is especially important when you're rapidly iterating and might accidentally break API contracts.

---

## Key Takeaways

1. **Rapid development creates architectural debt** - Be prepared to refactor as your understanding of the problem space evolves
2. **Consolidation is inevitable** - Multiple similar endpoints often indicate a need for unified design
3. **MCP tools enhance the workflow** - Sequential thinking and browser tools add valuable capabilities
4. **Always review AI-generated code** - The model can over-engineer solutions when simpler approaches exist
5. **LLM reasoning beats complex metrics** - Sometimes the simplest solution is to ask an LLM to make a decision
6. **Naming consistency across the stack eliminates transformation logic** - Keep field names the same from database to frontend
7. **API contract testing catches 80% of frontend-breaking changes** - Test response structure, not business logic
8. **Tags beat rigid hierarchies** - Flexible tagging systems adapt better than workspace concepts

The productivity gains are real, but they come with the responsibility to maintain clean architecture and avoid the trap of rapid prototyping without proper planning. Claude Code excels at the implementation details, but human judgment is still essential for architectural decisions and knowing when to simplify rather than complicate.
c:[["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Claude Code: From 30% to 50% Better Than Cursor Agent Mode\",\"description\":\"My experience with Claude Code's productivity gains, the double-edged sword of rapid development, and lessons learned from over-engineering features.\",\"datePublished\":\"2025-08-11T00:00:00.000Z\",\"dateModified\":\"2025-08-11T00:00:00.000Z\",\"author\":{\"@type\":\"Person\",\"name\":\"Augustin Chan\",\"url\":\"https://augustinchan.dev\",\"sameAs\":[\"https://x.com/augchan42\",\"https://github.com/augchan42\"]},\"publisher\":{\"@type\":\"Person\",\"name\":\"Augustin Chan\",\"url\":\"https://augustinchan.dev\"},\"url\":\"https://augustinchan.dev/posts/2025-08-11-claude-code-productivity-gains\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https://augustinchan.dev/posts/2025-08-11-claude-code-productivity-gains\"},\"image\":\"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg\"}"}}],["$","article",null,{"children":[["$","header",null,{"style":{"marginBottom":"2rem"},"children":[["$","h1",null,{"style":{"fontSize":"2.5em","marginBottom":"0.5rem"},"children":"Claude Code: From 30% to 50% Better Than Cursor Agent Mode"}],["$","div",null,{"style":{"color":"#666","fontSize":"1em","marginBottom":"1rem"},"children":"August 11, 2025"}],["$","p",null,{"style":{"fontSize":"1.1em","color":"#555","fontStyle":"italic","marginBottom":"2rem"},"children":"My experience with Claude Code's productivity gains, the double-edged sword of rapid development, and lessons learned from over-engineering features."}]]}],["$","$L16",null,{"content":"$17"}],"$L18"]}]]
18:["$","aside",null,{"style":{"marginTop":"4rem","paddingTop":"2rem","borderTop":"2px solid #ddd"},"children":[["$","h2",null,{"style":{"fontSize":"1.5em","marginBottom":"1.5rem"},"children":"Related Posts"}],["$","div",null,{"style":{"display":"flex","flexDirection":"column","gap":"1.5rem"},"children":[["$","article","2025-09-27-llm-reasoning-pattern-classification-failure-modes",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/2025-09-27-llm-reasoning-pattern-classification-failure-modes","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"When LLM Reasoning Becomes the Pattern - Meta-Classification Failure Modes"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Hard constraints beat soft self-regulation when an LLM's reasoning converges to a template."}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 27, 2025"}]]}],["$","article","2025-09-21-evolutionary-adrs-first-principles",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/2025-09-21-evolutionary-adrs-first-principles","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Evolutionary ADRs: Writing Architecture Decision Records from First Principles"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Why creating ADRs during development, not before it, leads to more honest and valuable documentation of your architectural decisions."}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 21, 2025"}]]}],["$","article","hello-nextra",{"style":{"padding":"1.25rem","border":"1px solid #ddd","borderRadius":"8px","backgroundColor":"#fafafa"},"children":[["$","$L2",null,{"href":"/posts/hello-nextra","style":{"fontSize":"1.1em","fontWeight":"bold","textDecoration":"none","color":"#333"},"children":"Hello Nextra"}],["$","p",null,{"style":{"fontSize":"0.95em","color":"#555","margin":"0.5rem 0 0 0","lineHeight":"1.5"},"children":"Welcome to my new blog powered by Next.js and Nextra"}],["$","div",null,{"style":{"fontSize":"0.85em","color":"#888","marginTop":"0.5rem"},"children":"September 21, 2025"}]]}]]}]]}]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
e:null
10:{"metadata":[["$","title","0",{"children":"Claude Code: From 30% to 50% Better Than Cursor Agent Mode | Augustin Chan"}],["$","meta","1",{"name":"description","content":"My experience with Claude Code's productivity gains, the double-edged sword of rapid development, and lessons learned from over-engineering features."}],["$","link","2",{"rel":"author","href":"https://augustinchan.dev"}],["$","meta","3",{"name":"author","content":"Augustin Chan"}],["$","meta","4",{"name":"keywords","content":"AI,Machine Learning,Web3,Software Engineering,React,Next.js,TypeScript,Blog"}],["$","meta","5",{"name":"creator","content":"Augustin Chan"}],["$","meta","6",{"name":"publisher","content":"Augustin Chan"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://augustinchan.dev/posts/2025-08-11-claude-code-productivity-gains"}],["$","meta","10",{"property":"og:title","content":"Claude Code: From 30% to 50% Better Than Cursor Agent Mode"}],["$","meta","11",{"property":"og:description","content":"My experience with Claude Code's productivity gains, the double-edged sword of rapid development, and lessons learned from over-engineering features."}],["$","meta","12",{"property":"og:url","content":"https://augustinchan.dev/posts/2025-08-11-claude-code-productivity-gains"}],["$","meta","13",{"property":"og:site_name","content":"Augustin Chan"}],["$","meta","14",{"property":"og:locale","content":"en_US"}],["$","meta","15",{"property":"og:image","content":"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg"}],["$","meta","16",{"property":"og:image:width","content":"400"}],["$","meta","17",{"property":"og:image:height","content":"400"}],["$","meta","18",{"property":"og:image:alt","content":"Claude Code: From 30% to 50% Better Than Cursor Agent Mode"}],["$","meta","19",{"property":"og:type","content":"article"}],["$","meta","20",{"property":"article:published_time","content":"2025-08-11T00:00:00.000Z"}],["$","meta","21",{"property":"article:author","content":"Augustin Chan"}],["$","meta","22",{"property":"article:section","content":"Technology"}],["$","meta","23",{"property":"article:tag","content":"AI"}],["$","meta","24",{"property":"article:tag","content":"Machine Learning"}],["$","meta","25",{"property":"article:tag","content":"Web3"}],["$","meta","26",{"property":"article:tag","content":"Software Engineering"}],["$","meta","27",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","28",{"name":"twitter:creator","content":"@augchan42"}],["$","meta","29",{"name":"twitter:title","content":"Claude Code: From 30% to 50% Better Than Cursor Agent Mode"}],["$","meta","30",{"name":"twitter:description","content":"My experience with Claude Code's productivity gains, the double-edged sword of rapid development, and lessons learned from over-engineering features."}],["$","meta","31",{"name":"twitter:image","content":"https://augustinchan.dev/img/Xrn0Id68_400x400.jpg"}]],"error":null,"digest":"$undefined"}
15:"$10:metadata"
